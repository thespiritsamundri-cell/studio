
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function hasPermission(permission) {
      let userPermissions = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
      return userPermissions[permission] == true;
    }
    
    // Allow super_admin to read/write anything
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // USERS: Only signed in users can see their own data, only super_admin can write.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // SESSIONS: Users can manage their own sessions.
    match /sessions/{sessionId} {
      allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    // SETTINGS: Any signed-in user can read, only admin can write.
    match /Settings/{docId} {
      allow read: if isSignedIn();
      allow write: if hasPermission('settings');
    }

    // BRANDING: Any signed-in user can read, only admin can write.
    match /branding/{docId} {
        allow read: if isSignedIn();
        allow write: if hasPermission('settings');
    }
    
    // NOTIFICATIONS: only super_admin can manage.
    match /notifications/{docId} {
      allow read, write: if isSuperAdmin();
    }
    
    // ACTIVITY LOG: only super_admin can read/write
    match /activityLog/{logId} {
        allow read, write: if isSuperAdmin();
    }

    // GENERAL COLLECTIONS
    match /students/{studentId} {
      allow read: if hasPermission('students');
      allow create, update: if hasPermission('admissions');
      allow delete: if hasPermission('archived');
    }
    
    match /alumni/{alumnusId} {
      allow read: if hasPermission('alumni');
      allow write: if hasPermission('admissions'); // To reactivate
    }
    
    match /families/{familyId} {
      allow read, write: if hasPermission('families');
      allow delete: if hasPermission('archived');
    }
    
    match /classes/{classId} {
        allow read, write: if hasPermission('classes');
    }

    match /teachers/{teacherId} {
        allow read, write: if hasPermission('teachers');
    }
    
    match /timetable/{timetableId} {
        allow read, write: if hasPermission('timetable');
    }
    
    match /exams/{examId} {
        allow read, write: if hasPermission('examSystem');
    }
    
    match /attendances/{attendanceId} {
        allow read, write: if hasPermission('attendance');
    }

    match /teacherAttendances/{attendanceId} {
        allow read, write: if hasPermission('attendance');
    }
    
    match /expenses/{expenseId} {
      allow read: if hasPermission('expenses');
      allow create, update: if hasPermission('expenses');
      // Allow delete if user has both income and expenses permission for reversal
      allow delete: if hasPermission('expenses') && hasPermission('income');
    }
    
    match /fees/{feeId} {
      allow read: if hasPermission('income') || hasPermission('feeCollection');
      // Allow write for fee collection, income management, and expense reversal
      allow write: if hasPermission('feeCollection') || hasPermission('income') || (hasPermission('expenses') && hasPermission('income'));
    }
  }
}
