rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isSuperAdmin(userId) {
      return getUserRole(userId) == 'super_admin';
    }

    function hasPermission(userId, permission) {
      return isSuperAdmin(userId) || get(/databases/$(database)/documents/users/$(userId)).data.permissions[permission] == true;
    }

    // Admins can do anything
    match /{path=**}/documents/{doc} {
      allow read, write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }

    match /activityLog/{logId} {
      allow read, create: if request.auth != null;
      allow write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }
    
    match /notifications/{notifId} {
        allow read, write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }

    match /Settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasPermission(request.auth.uid, 'settings');
    }
    
    match /branding/{assetId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasPermission(request.auth.uid, 'settings');
    }

    match /students/{studentId} {
      allow read: if request.auth != null && (hasPermission(request.auth.uid, 'students') || hasPermission(request.auth.uid, 'admissions'));
      allow write: if request.auth != null && (hasPermission(request.auth.uid, 'students') || hasPermission(request.auth.uid, 'admissions'));
    }
    
    match /alumni/{alumniId} {
        allow read: if request.auth != null && hasPermission(request.auth.uid, 'alumni');
        allow write: if request.auth != null && hasPermission(request.auth.uid, 'alumni');
    }

    match /families/{familyId} {
      allow read, write: if request.auth != null && (hasPermission(request.auth.uid, 'families') || hasPermission(request.auth.uid, 'admissions'));
    }

    match /classes/{classId} {
      allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'classes');
    }

    match /teachers/{teacherId} {
      allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'teachers');
    }
    
    match /teacherAttendances/{attendanceId} {
        allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'attendance');
    }

    match /attendances/{attendanceId} {
        allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'attendance');
    }

    match /exams/{examId} {
      allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'examSystem');
    }
    
    match /timetables/{timetableId} {
        allow read, write: if request.auth != null && hasPermission(request.auth.uid, 'timetable');
    }

    match /fees/{feeId} {
      allow read: if request.auth != null && (hasPermission(request.auth.uid, 'feeCollection') || hasPermission(request.auth.uid, 'income') || hasPermission(request.auth.uid, 'accounts'));
      // Allow creation/updates for fee collection, or for expense reversals (which also create fees)
      allow write: if request.auth != null && (hasPermission(request.auth.uid, 'feeCollection') || hasPermission(request.auth.uid, 'expenses'));
    }

    match /expenses/{expenseId} {
      allow read, write: if request.auth != null && (hasPermission(request.auth.uid, 'expenses') || hasPermission(request.auth.uid, 'accounts'));
    }
  }
}