rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to get the user's role and permissions from the 'users' collection
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if the user is a super_admin
    function isSuperAdmin() {
      let userData = getUserData(request.auth.uid);
      return userData.role == 'super_admin';
    }

    // Helper function to check if the user has a specific permission
    function hasPermission(permission) {
      let userData = getUserData(request.auth.uid);
      return userData.permissions[permission] == true;
    }

    // Default deny all reads/writes unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow any authenticated user to read their own user data
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      // Only super_admin can write to user documents (for updating permissions)
      allow write: if isSuperAdmin();
    }
    
    // Allow any authenticated user to read settings
    match /Settings/{docId} {
      allow read: if request.auth.uid != null;
      allow write: if isSuperAdmin();
    }
    
    match /branding/{docId} {
        allow read: if request.auth.uid != null;
        allow write: if isSuperAdmin();
    }

    // Activity Log & Notifications: Only super_admin can read all logs. Other authenticated users can create logs.
    match /activityLog/{logId} {
      allow list: if isSuperAdmin();
      allow get: if isSuperAdmin();
      allow create: if request.auth.uid != null;
      allow delete, update: if isSuperAdmin(); // Only super_admin can clear history
    }
    
    match /notifications/{notifId} {
        allow read, write: if isSuperAdmin();
    }

    // --- Main Data Collections ---

    match /families/{familyId} {
        allow read: if hasPermission('families') || isSuperAdmin();
        allow create, update, delete: if hasPermission('families') || isSuperAdmin();
    }
    
    match /students/{studentId} {
        allow read: if hasPermission('students') || isSuperAdmin();
        allow create, update, delete: if hasPermission('admissions') || hasPermission('students') || isSuperAdmin();
    }
    
    match /alumni/{alumniId} {
        allow read: if hasPermission('alumni') || isSuperAdmin();
        allow create, update, delete: if hasPermission('alumni') || hasPermission('admissions') || isSuperAdmin();
    }

    match /classes/{classId} {
        allow read: if request.auth.uid != null;
        allow create, update, delete: if hasPermission('classes') || isSuperAdmin();
    }
    
    match /teachers/{teacherId} {
        allow read: if request.auth.uid != null;
        allow create, update, delete: if hasPermission('teachers') || isSuperAdmin();
    }
    
    match /timetables/{timetableId} {
        allow read: if request.auth.uid != null;
        allow create, update, delete: if hasPermission('timetable') || isSuperAdmin();
    }
    
    match /exams/{examId} {
        allow read: if hasPermission('examSystem') || isSuperAdmin();
        allow create, update, delete: if hasPermission('examSystem') || isSuperAdmin();
    }
    
    match /fees/{feeId} {
        allow read: if hasPermission('feeCollection') || hasPermission('income') || isSuperAdmin();
        allow create, update, delete: if hasPermission('feeCollection') || isSuperAdmin();
    }
    
    match /expenses/{expenseId} {
        allow read: if hasPermission('expenses') || isSuperAdmin();
        allow create, update, delete: if hasPermission('expenses') || isSuperAdmin();
    }

    match /attendances/{attendanceId} {
        allow read: if hasPermission('attendance') || isSuperAdmin();
        allow create, update: if hasPermission('attendance') || isSuperAdmin();
        allow delete: if isSuperAdmin();
    }

    match /teacherAttendances/{attendanceId} {
        allow read: if hasPermission('attendance') || isSuperAdmin();
        allow create, update: if hasPermission('attendance') || isSuperAdmin();
        allow delete: if isSuperAdmin();
    }
  }
}
