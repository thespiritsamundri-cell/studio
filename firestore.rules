rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isSuperAdmin() {
      return getUserData().role == 'super_admin';
    }
    
    function hasPermission(permission) {
      return getUserData().permissions[permission] == true;
    }

    // Settings are public read, but only super admin can write
    match /Settings/{settingId} {
        allow read: if true;
        allow write: if isSignedIn() && isSuperAdmin();
    }
    
    match /branding/{assetId} {
        allow read: if true;
        allow write: if isSignedIn() && isSuperAdmin();
    }
    
    // All signed-in users can read, but write access is permission-based
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn() && (hasPermission('admissions') || hasPermission('students') || isSuperAdmin());
      allow delete: if isSignedIn() && (hasPermission('students') || isSuperAdmin());
    }
    
    match /alumni/{alumniId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (hasPermission('alumni') || isSuperAdmin());
    }

    match /families/{familyId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn() && (hasPermission('families') || isSuperAdmin());
      allow delete: if isSignedIn() && (hasPermission('families') || isSuperAdmin());
    }
    
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (hasPermission('classes') || isSuperAdmin());
    }
    
    match /teachers/{teacherId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (hasPermission('teachers') || isSuperAdmin());
    }

    match /fees/{feeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (hasPermission('feeCollection') || hasPermission('income') || isSuperAdmin());
    }
    
    match /expenses/{expenseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (hasPermission('expenses') || isSuperAdmin());
      allow update: if isSignedIn() && (hasPermission('expenses') || isSuperAdmin());
      allow delete: if isSignedIn() && (hasPermission('expenses') || isSuperAdmin());
    }
    
    match /attendances/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn() && (hasPermission('attendance') || isSuperAdmin());
    }
    
    match /teacherAttendances/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn() && (hasPermission('attendance') || isSuperAdmin());
    }
    
    match /exams/{examId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (hasPermission('examSystem') || isSuperAdmin());
    }

    match /timetables/{timetableId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn() && (hasPermission('timetable') || isSuperAdmin());
    }

    match /activityLog/{logId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can generate logs
      allow delete: if isSignedIn() && isSuperAdmin(); // Only super admin can clear
    }
    
    match /users/{userId} {
       allow read, write: if isSignedIn() && isSuperAdmin();
       // Allow users to update their own profile, but not change role/permissions
       allow update: if isSignedIn() && request.auth.uid == userId 
                    && !('role' in request.resource.data) 
                    && !('permissions' in request.resource.data);
    }
    
    match /notifications/{notificationId} {
      allow read, create, update, delete: if isSignedIn() && isSuperAdmin();
    }
    
  }
}
