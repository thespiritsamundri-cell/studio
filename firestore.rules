rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function hasPermission(userId, permission) {
      return get(/databases/$(database)/documents/users/$(userId)).data.permissions[permission] == true;
    }
    
    function isSuperAdmin(userId) {
      return getUserRole(userId) == 'super_admin';
    }
    
    // Any authenticated user can read their own user data.
    // Only super_admin can manage users.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSuperAdmin(request.auth.uid);
      allow list, write: if isSuperAdmin(request.auth.uid);
    }
    
    // Any authenticated user with the 'settings' permission (super_admin) can read/write settings.
    // All authenticated users should be able to read settings to apply themes, etc.
    match /Settings/{docId} {
      allow read: if request.auth != null;
      allow write: if hasPermission(request.auth.uid, 'settings');
    }
    
    match /branding/{docId} {
        allow read: if request.auth != null;
        allow write: if hasPermission(request.auth.uid, 'settings');
    }

    // Only super_admin can read all sessions or delete any session.
    // Any authenticated user can delete their own sessions.
    match /sessions/{sessionId} {
      allow read, list, create, update: if isSuperAdmin(request.auth.uid);
      allow delete: if request.auth != null; // Allows user to sign out their other sessions.
    }
    
    // Only super_admin can read or manage notifications.
    match /notifications/{notificationId} {
      allow read, list, write: if isSuperAdmin(request.auth.uid);
    }
    
    // Only super_admin can manage activity logs.
    match /activityLog/{logId} {
       allow read, list, write: if isSuperAdmin(request.auth.uid);
    }
    
    // All authenticated users can read data from these collections if they have the specific permission.
    // Write access is also based on specific permissions.
    match /{collection}/{docId} 
    where collection in ['students', 'families', 'fees', 'teachers', 'classes', 'exams', 'expenses', 'timetables', 'attendances', 'teacherAttendances', 'alumni'] {
      
      // Default allow read if user has the permission for that collection name
      allow read, list: if request.auth != null && hasPermission(request.auth.uid, collection);
      
      // Default allow write if user has the permission for that collection name
      allow write: if request.auth != null && hasPermission(request.auth.uid, collection);
    }
    
    // More granular override for specific needs, if any.
    // For example, if you wanted any user to be able to *read* classes, but only 'classes' permission to write:
    match /classes/{classId} {
      allow read, list: if request.auth != null; // All users can see class lists.
      allow write: if hasPermission(request.auth.uid, 'classes');
    }
  }
}
