rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function isAccountant() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'accountant';
    }

    function isCoordinator() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coordinator';
    }
    
    function isPrimaryRole() {
        let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
        return userRole == 'super_admin' || userRole == 'accountant' || userRole == 'coordinator';
    }
    
    function getPermissions() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }

    // Universal read for signed-in users on single documents
    match /{document=**} {
      allow get: if request.auth != null;
    }

    // USERS
    match /users/{userId} {
      allow read, list: if request.auth != null; // Allow any authenticated user to read/list
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if false; // Do not allow deleting user records from client
    }
    
    // STUDENTS
    match /students/{studentId} {
        allow read, list: if request.auth != null;
        allow create: if getPermissions().admissions == true;
        allow update: if getPermissions().students == true;
        allow delete: if getPermissions().students == true;
    }
    
    // FAMILIES
    match /families/{familyId} {
        allow read, list: if request.auth != null;
        allow create: if getPermissions().families == true;
        allow update: if getPermissions().families == true;
        allow delete: if getPermissions().families == true;
    }
    
    // FEES
    match /fees/{feeId} {
        allow read, list: if request.auth != null;
        allow create: if getPermissions().feeCollection == true || getPermissions().income == true;
        allow update, delete: if getPermissions().feeCollection == true || getPermissions().income == true;
    }

    // EXPENSES
    match /expenses/{expenseId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if getPermissions().expenses == true;
    }

    // TEACHERS
    match /teachers/{teacherId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if getPermissions().teachers == true;
    }
    
    // ATTENDANCE
    match /attendances/{attendanceId} {
        allow read, list: if request.auth != null;
        allow create, update: if getPermissions().attendance == true;
    }
    
    match /teacherAttendances/{attendanceId} {
        allow read, list: if request.auth != null;
        allow create, update: if getPermissions().attendance == true;
    }
    
    // CLASSES
    match /classes/{classId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if getPermissions().classes == true;
    }
    
    // EXAMS
    match /exams/{examId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if getPermissions().examSystem == true;
    }
    
    // ALUMNI
    match /alumni/{alumniId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if getPermissions().alumni == true;
    }

    // ACTIVITY LOG
    match /activityLog/{logId} {
        allow read, list: if isSuperAdmin();
        allow create: if isPrimaryRole();
        allow delete: if isSuperAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, list, update: if isSuperAdmin();
      allow create: if isPrimaryRole();
    }
    
    // TIMETABLES
    match /timetables/{timetableId} {
        allow read, list: if request.auth != null;
        allow create, update: if getPermissions().timetable == true;
    }

    // SESSIONS
    match /sessions/{sessionId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow list: if isSuperAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if isSuperAdmin() || request.auth.uid == resource.data.userId;
    }
    
    // SETTINGS & BRANDING
    match /Settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }
     match /branding/{docId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }
  }
}
