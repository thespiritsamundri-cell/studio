
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isSuperAdmin(userId) {
      return getUserData(userId).role == 'super_admin';
    }
    
    function hasPermission(userId, permission) {
        return isSuperAdmin(userId) || getUserData(userId).permissions[permission] == true;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow get: if request.auth.uid == userId || isSuperAdmin(request.auth.uid);
      allow list: if isSuperAdmin(request.auth.uid);
      allow create, update, delete: if isSuperAdmin(request.auth.uid);
    }
    
    match /students/{studentId} {
      allow get: if request.auth != null;
      allow list: if hasPermission(request.auth.uid, 'students');
      allow create, update, delete: if hasPermission(request.auth.uid, 'students');
    }

    match /families/{familyId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'families');
        allow create, update, delete: if hasPermission(request.auth.uid, 'families');
    }
    
    match /fees/{feeId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'feeCollection');
        allow create, update, delete: if hasPermission(request.auth.uid, 'feeCollection');
    }

    match /expenses/{expenseId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'expenses');
        allow create, update, delete: if hasPermission(request.auth.uid, 'expenses');
    }

    match /teachers/{teacherId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'teachers');
        allow create, update, delete: if hasPermission(request.auth.uid, 'teachers');
    }

    match /classes/{classId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'classes');
        allow create, update, delete: if hasPermission(request.auth.uid, 'classes');
    }
    
    match /exams/{examId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'examSystem');
        allow create, update, delete: if hasPermission(request.auth.uid, 'examSystem');
    }
    
    match /timetables/{timetableId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'timetable');
        allow create, update, delete: if hasPermission(request.auth.uid, 'timetable');
    }
    
    match /alumni/{alumniId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'alumni');
        allow create, update, delete: if hasPermission(request.auth.uid, 'alumni');
    }
    
    match /attendances/{attendanceId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'attendance');
        allow create, update, delete: if hasPermission(request.auth.uid, 'attendance');
    }

    match /teacherAttendances/{teacherAttendanceId} {
        allow get: if request.auth != null;
        allow list: if hasPermission(request.auth.uid, 'attendance');
        allow create, update, delete: if hasPermission(request.auth.uid, 'attendance');
    }

    match /activityLog/{logId} {
      allow read: if hasPermission(request.auth.uid, 'settings');
      allow create: if request.auth != null;
      allow delete: if isSuperAdmin(request.auth.uid);
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isSuperAdmin(request.auth.uid);
    }
    
    match /branding/{docId} {
       allow read: if true;
       allow write: if isSuperAdmin(request.auth.uid);
    }

    match /Settings/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin(request.auth.uid);
    }
  }
}
