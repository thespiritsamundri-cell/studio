
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get the requesting user's role from their user document.
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Helper function to get the requesting user's specific permissions map.
    function getPermissions() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }
    
    // Helper to check if the user is one of the primary roles that needs broad read access.
    function isPrimaryRole() {
      return getRole() in ['super_admin', 'accountant', 'coordinator'];
    }

    // -- COLLECTIONS --

    // Users can read their own document, super_admin can manage all users.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || getRole() == 'super_admin';
      allow write: if getRole() == 'super_admin';
    }

    // Broad read access for all primary roles, but writes are permission-based.
    match /{collection}/{docId} {
      allow read: if request.auth.uid != null && isPrimaryRole();
    }

    // Specific write rules per collection.
    match /students/{studentId} {
      allow write: if getPermissions().students == true;
    }
    match /families/{familyId} {
      allow write: if getPermissions().families == true;
    }
    match /teachers/{teacherId} {
      allow write: if getPermissions().teachers == true;
    }
    match /classes/{classId} {
      allow write: if getPermissions().classes == true;
    }
    match /fees/{feeId} {
       allow write: if getPermissions().feeCollection == true;
    }
    match /expenses/{expenseId} {
       allow write: if getPermissions().expenses == true;
    }
    match /exams/{examId} {
      allow write: if getPermissions().examSystem == true;
    }
    match /alumni/{alumniId} {
      allow write: if getPermissions().alumni == true;
    }
    match /attendances/{attendanceId} {
      allow write: if getPermissions().attendance == true;
    }
    match /teacherAttendances/{attendanceId} {
      allow write: if getPermissions().attendance == true;
    }
    match /timetables/{timetableId} {
        allow write: if getPermissions().timetable == true;
    }

    // Settings can only be changed by super_admin.
    match /Settings/{settingId} {
      allow read: if isPrimaryRole();
      allow write: if getRole() == 'super_admin';
    }

    // Activity logs can be read by primary roles, and written to by them.
    match /activityLog/{logId} {
      allow read: if isPrimaryRole();
      allow write: if isPrimaryRole();
    }
    
    // Sessions can be read by primary roles. Deleting (signing out) is handled by the data context logic.
    match /sessions/{sessionId} {
      allow read: if isPrimaryRole();
      allow create: if request.auth.uid != null;
      allow delete: if request.auth.uid != null; // Allow users to sign out sessions
    }

    // Notifications can be created by primary roles, but only read/updated by super_admin.
    match /notifications/{notificationId} {
      allow create: if isPrimaryRole();
      allow read, update: if getRole() == 'super_admin';
    }
  }
}
