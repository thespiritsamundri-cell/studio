rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

    function isAccountant() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'accountant';
    }
    
    function isCoordinator() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coordinator';
    }

    function isPrimaryRole() {
        let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
        return role in ['super_admin', 'accountant', 'coordinator'];
    }

    function getPermissions() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }

    // Rules for each collection
    match /users/{userId} {
      // Allow users to read their own data.
      // Allow super_admin to read/write any user document.
      allow read: if isSignedIn() && (request.auth.uid == userId || isSuperAdmin());
      allow write: if isSuperAdmin();
    }
    
    match /Settings/{docId} {
        allow read: if isSignedIn();
        allow write: if isSuperAdmin();
    }
    
    match /branding/{docId} {
        allow read: if true; // Publicly readable for logos, etc.
        allow write: if isSuperAdmin();
    }

    match /students/{studentId} {
      allow read: if isSignedIn() && (getPermissions().students == true || isAccountant() || isCoordinator());
      allow write: if isSignedIn() && getPermissions().students == true;
    }
    
    match /families/{familyId} {
        allow read: if isSignedIn() && (getPermissions().families == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().families == true;
    }

    match /fees/{feeId} {
        allow read: if isSignedIn() && getPermissions().feeCollection == true;
        allow write: if isSignedIn() && getPermissions().feeCollection == true;
    }
    
    match /expenses/{expenseId} {
        allow read: if isSignedIn() && getPermissions().expenses == true;
        allow write: if isSignedIn() && getPermissions().expenses == true;
    }
    
    match /classes/{classId} {
        allow read: if isSignedIn() && (getPermissions().classes == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().classes == true;
    }

    match /teachers/{teacherId} {
        allow read: if isSignedIn() && (getPermissions().teachers == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().teachers == true;
    }
    
    match /timetables/{timetableId} {
        allow read: if isSignedIn() && (getPermissions().timetable == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().timetable == true;
    }

    match /exams/{examId} {
      allow read: if isSignedIn() && (getPermissions().examSystem == true || isAccountant() || isCoordinator());
      allow write: if isSignedIn() && getPermissions().examSystem == true;
    }
    
    match /alumni/{alumniId} {
        allow read: if isSignedIn() && (getPermissions().alumni == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().alumni == true;
    }
    
    match /attendances/{attendanceId} {
        allow read: if isSignedIn() && getPermissions().attendance == true;
        allow write: if isSignedIn() && getPermissions().attendance == true;
    }

    match /teacherAttendances/{attendanceId} {
        allow read: if isSignedIn() && (getPermissions().attendance == true || isAccountant() || isCoordinator());
        allow write: if isSignedIn() && getPermissions().attendance == true;
    }
    
    match /activityLog/{logId} {
        allow read: if isPrimaryRole();
        allow write: if isPrimaryRole();
    }
    
    match /sessions/{sessionId} {
      // Users can only read their own session to validate it
      // Super admin can list all to manage them
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list, read: if isSuperAdmin() || isAccountant() || isCoordinator();
      allow create: if isSignedIn();
      allow delete: if isSuperAdmin() || request.auth.uid == resource.data.userId;
    }
    
    match /notifications/{notificationId} {
        allow create: if isPrimaryRole();
        allow read, update: if isSuperAdmin();
        allow list, delete: if isSuperAdmin();
    }
  }
}
