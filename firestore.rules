rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function getUserPermissions() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }
    
    function isPrimaryRole() {
        // Checks if the user has a primary role that should have general read access
        let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
        return isSignedIn() && (userRole == 'super_admin' || userRole == 'accountant' || userRole == 'coordinator');
    }

    // Rules for each collection
    match /{collection}/{docId} {
      allow read: if isSignedIn();
    }
    
    match /Settings/{docId} {
        allow read: if isSignedIn();
        allow write: if isSuperAdmin();
    }
    
    match /branding/{docId} {
        allow read: if true; // Publicly readable for logos, etc.
        allow write: if isSuperAdmin();
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow list, write: if isSuperAdmin();
    }
    
    match /sessions/{sessionId} {
      allow read: if isPrimaryRole();
      allow create: if isSignedIn();
      allow delete: if isSuperAdmin() || request.auth.uid == resource.data.userId;
    }
    
    match /notifications/{notificationId} {
        allow create: if isPrimaryRole();
        allow read, update: if isSuperAdmin();
        allow delete: if isSuperAdmin();
    }
    
    match /activityLog/{logId} {
      allow read: if isPrimaryRole();
      allow create, write: if isPrimaryRole();
      allow delete: if isSuperAdmin();
    }

    match /students/{studentId} {
      allow read: if isSignedIn();
      allow create, update, delete: if getUserPermissions().students == true;
    }
    
    match /alumni/{alumniId} {
       allow read: if isSignedIn();
       allow create, update, delete: if getUserPermissions().alumni == true;
    }

    match /families/{familyId} {
      allow read: if isSignedIn();
      allow create, update, delete: if getUserPermissions().families == true;
    }

    match /fees/{feeId} {
      allow read: if isSignedIn();
      allow create, update, delete: if getUserPermissions().feeCollection == true || getUserPermissions().income == true;
    }

    match /teachers/{teacherId} {
      allow read: if isSignedIn();
      allow create, update, delete: if getUserPermissions().teachers == true;
    }

    match /teacherAttendances/{attendanceId} {
       allow read: if isSignedIn();
       allow create, update, delete: if getUserPermissions().attendance == true;
    }
    
     match /attendances/{attendanceId} {
       allow read: if isSignedIn();
       allow create, update, delete: if getUserPermissions().attendance == true;
    }

    match /classes/{classId} {
      allow read: if isSignedIn();
      allow create, update, delete: if getUserPermissions().classes == true;
    }
    
    match /expenses/{expenseId} {
        allow read: if isSignedIn();
        allow create, update, delete: if getUserPermissions().expenses == true;
    }
    
    match /exams/{examId} {
        allow read: if isSignedIn();
        allow create, update, delete: if getUserPermissions().examSystem == true;
    }
    
    match /timetables/{timetableId} {
        allow read: if isSignedIn();
        allow create, update, delete: if getUserPermissions().timetable == true;
    }
  }
}
