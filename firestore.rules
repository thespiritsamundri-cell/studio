
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

    function hasPermission(permission) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions[permission] == true;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Collection Rules
    match /{document=**} {
      allow read, write: if false; // Deny all by default
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isOwner(userId);
      allow delete: if isSuperAdmin();
    }
    
    match /Settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin() || hasPermission('settings');
    }

    match /students/{studentId} {
      allow read: if isSuperAdmin() || hasPermission('students');
      allow create: if isSuperAdmin() || hasPermission('admissions');
      allow update: if isSuperAdmin() || hasPermission('students');
      allow delete: if isSuperAdmin() || hasPermission('students');
    }
    
    match /alumni/{alumniId} {
        allow read, write: if isSuperAdmin() || hasPermission('alumni');
    }
    
    match /families/{familyId} {
        allow read, write: if isSuperAdmin() || hasPermission('families');
    }
    
    match /teachers/{teacherId} {
        allow read, write: if isSuperAdmin() || hasPermission('teachers');
    }
    
    match /classes/{classId} {
        allow read, write: if isSuperAdmin() || hasPermission('classes');
    }
    
    match /exams/{examId} {
        allow read, write: if isSuperAdmin() || hasPermission('examSystem');
    }
    
    match /attendances/{attendanceId} {
        allow read, write: if isSuperAdmin() || hasPermission('attendance');
    }
    
    match /teacherAttendances/{attendanceId} {
        allow read, write: if isSuperAdmin() || hasPermission('attendance');
    }
    
    match /timetables/{timetableId} {
        allow read, write: if isSuperAdmin() || hasPermission('timetable');
    }
    
    match /activityLog/{logId} {
      allow read: if isSuperAdmin() || hasPermission('settings');
      allow create: if isSignedIn();
      allow delete: if isSuperAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isSuperAdmin();
    }
    
    match /fees/{feeId} {
        allow read: if isSuperAdmin() || hasPermission('feeCollection') || hasPermission('income');
        allow create: if isSuperAdmin() || hasPermission('feeCollection') || hasPermission('admissions') || (hasPermission('expenses') && hasPermission('income')); // Allow for expense reversal
        allow update: if isSuperAdmin() || hasPermission('feeCollection');
        allow delete: if isSuperAdmin() || hasPermission('feeCollection');
    }

    match /expenses/{expenseId} {
      allow read: if isSuperAdmin() || hasPermission('expenses');
      allow create: if isSuperAdmin() || hasPermission('expenses');
      allow update: if isSuperAdmin() || hasPermission('expenses');
      allow delete: if isSuperAdmin() || (hasPermission('expenses') && hasPermission('income')); // Allow delete if user can also create income (fees)
    }
  }
}
