rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to get the requesting user's permissions map.
    function getUserPermissions() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }
    
    // Helper function to check if the user has a specific permission.
    function hasPermission(permissionKey) {
      let permissions = getUserPermissions();
      return permissions[permissionKey] == true;
    }

    // super_admin has all permissions. This simplifies many checks.
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

    // -- COLLECTIONS --

    // USERS: Only super_admin can manage users, but users can read their own doc.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }
    
    // SESSIONS: Users can delete their own sessions (for logout). Super_admin can list/delete any.
    match /sessions/{sessionId} {
      allow read, list, write: if isSuperAdmin();
      allow delete: if request.auth != null;
    }
    
    // NOTIFICATIONS: Any primary role can create. Only super_admin can read/update.
    match /notifications/{docId} {
      allow read, update, delete: if isSuperAdmin();
      allow create: if isSuperAdmin() || hasPermission('dashboard'); // Dashboard permission is a proxy for primary roles
    }

    // SETTINGS: Only super_admin can write. Any authenticated user can read.
    match /Settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }
    
    // BRANDING: Only super_admin can write. Any authenticated user can read.
    match /branding/{docId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }

    // General read access for authenticated users.
    // Write access is controlled by specific permission checks below.
    match /{collection}/{docId} 
      where collection in ['students', 'families', 'fees', 'teachers', 'classes', 'exams', 'expenses', 'timetables', 'alumni', 'activityLog', 'attendances', 'teacherAttendances'] {
      allow read: if request.auth != null;
    }
    
    // STUDENTS:
    match /students/{studentId} {
      allow write: if isSuperAdmin() || hasPermission('students') || hasPermission('admissions');
    }
    
    // FAMILIES:
    match /families/{familyId} {
      allow write: if isSuperAdmin() || hasPermission('families') || hasPermission('admissions');
    }
    
    // TEACHERS:
    match /teachers/{teacherId} {
      allow write: if isSuperAdmin() || hasPermission('teachers');
    }
    
    // CLASSES:
    match /classes/{classId} {
      allow write: if isSuperAdmin() || hasPermission('classes');
    }
    
    // EXPENSES:
    match /expenses/{expenseId} {
       allow write: if isSuperAdmin() || hasPermission('expenses');
    }
    
    // FEES:
    match /fees/{feeId} {
      allow write: if isSuperAdmin() || hasPermission('feeCollection') || hasPermission('income');
    }
    
    // EXAMS:
    match /exams/{examId} {
       allow write: if isSuperAdmin() || hasPermission('examSystem');
    }
    
    // TIMETABLES:
    match /timetables/{timetableId} {
       allow write: if isSuperAdmin() || hasPermission('timetable');
    }
    
    // ACTIVITY LOG:
    match /activityLog/{logId} {
      allow create: if request.auth != null;
      allow delete: if isSuperAdmin();
      allow update: if false; // Logs should be immutable
    }

    // ALUMNI:
    match /alumni/{alumniId} {
      allow write: if isSuperAdmin() || hasPermission('alumni') || hasPermission('students');
    }
    
    // ATTENDANCES (Student & Teacher):
    match /attendances/{attendanceId} {
      allow write: if isSuperAdmin() || hasPermission('attendance');
    }
    match /teacherAttendances/{attendanceId} {
      allow write: if isSuperAdmin() || hasPermission('attendance');
    }
  }
}